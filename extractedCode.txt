export const add = (a: number, b: number): number => a + b
<script setup>
import { ref } from 'vue'
const inputValue = ref('')
</script>
<template>
  <m-input v-model="inputValue" placeholder="请输入" clearable type="text" style="width: 240px" />
</template>
<script setup>
import { ref } from 'vue'
const inputValue = ref('')
</script>
<template>
  <m-input v-model="inputValue" placeholder="请输入" disabled type="text" style="width: 240px" />
</template>
<script setup>
</script>
<template>
  <div style="width: 100%; height: 300px;">
    <m-carousel interval="1000">
      <m-carousel-item>1</m-carousel-item>
      <m-carousel-item>2</m-carousel-item>
      <m-carousel-item>3</m-carousel-item>
      <m-carousel-item>4</m-carousel-item>
    </m-carousel>
    <br>
  </div>
</template>
<style lang="less" scoped>
.m-carousel {
  .m-carousel-item {
    line-height: 260px;
    font-size: 18px;
    text-align: center;
  }
  .m-carousel-item:nth-child(2n) {
    background-color: #80aba1;
  }
  .m-carousel-item:nth-child(2n + 1) {
    background-color: #8393b9;
  }
}
</style>
<script setup>
import { ref } from 'vue'
const inputValue = ref('')
</script>
<template>
  <m-input v-model="inputValue" placeholder="请输入" type="password" style="width: 240px" />
</template>
<script setup>
</script>
<template>
  <div style="width: 100%">
    <m-carousel :autoplay="false" arrow="always" style="height: 260px">
      <m-carousel-item>1</m-carousel-item>
      <m-carousel-item>2</m-carousel-item>
      <m-carousel-item>3</m-carousel-item>
      <m-carousel-item>4</m-carousel-item>
    </m-carousel>
    <br>
    <m-carousel :autoplay="true" arrow="never" style="height: 260px">
      <m-carousel-item>1</m-carousel-item>
      <m-carousel-item>2</m-carousel-item>
      <m-carousel-item>3</m-carousel-item>
      <m-carousel-item>4</m-carousel-item>
    </m-carousel>
  </div>
</template>
<style lang="less" scoped>
.m-carousel {
  .m-carousel-item {
    line-height: 260px;
    font-size: 18px;
    text-align: center;
  }
  .m-carousel-item:nth-child(2n) {
    background-color: #80aba1;
  }
  .m-carousel-item:nth-child(2n + 1) {
    background-color: #8393b9;
  }
}
</style>
<script setup>
import { ref } from 'vue'
const inputValue = ref('')
</script>
<template>
  <m-input v-model="inputValue" placeholder="请输入" type="text" style="width: 240px" />
</template>
<script setup>
import { computed } from 'vue'
import { Props } from './icon.ts'
const { size, color } = defineProps(Props)
const style = computed(() => {
  return {
    ...(size ? { 'font-size': `${size}px` } : {}),
    ...(color ? { color } : {}),
  }
})
</script>
<template>
  <i class="m-icon" :class="[`icon-${name}`]" :style="style" />
</template>
<style scoped>
</style>
<script setup>
</script>
<template>
  <div style="width: 100%">
    <m-carousel direction="next" style="height: 260px">
      <m-carousel-item>1</m-carousel-item>
      <m-carousel-item>2</m-carousel-item>
      <m-carousel-item>3</m-carousel-item>
      <m-carousel-item>4</m-carousel-item>
    </m-carousel>
    <br>
    <m-carousel direction="pre" style="height: 260px">
      <m-carousel-item>1</m-carousel-item>
      <m-carousel-item>2</m-carousel-item>
      <m-carousel-item>3</m-carousel-item>
      <m-carousel-item>4</m-carousel-item>
    </m-carousel>
  </div>
</template>
<style lang="less" scoped>
.m-carousel {
  .m-carousel-item {
    line-height: 260px;
    font-size: 18px;
    text-align: center;
  }
  .m-carousel-item:nth-child(2n) {
    background-color: #80aba1;
  }
  .m-carousel-item:nth-child(2n + 1) {
    background-color: #8393b9;
  }
}
</style>
export const Props = {
  name: {
    type: String,
  },
  size: {
    type: Number,
  },
  color: {
    type: String,
  },
}
<script setup>
import { ref } from 'vue'
const inputValue1 = ref('')
const inputValue2 = ref('')
</script>
<template>
  <!-- 前嵌入 -->
  <m-input v-model="inputValue1" placeholder="请输入" type="text" style="width: 240px">
    <template #pre-icon>
      <i class="m-icon icon-user" />
    </template>
  </m-input>
  <!-- 后嵌入 -->
  <m-input v-model="inputValue2" placeholder="请输入" type="text" style="width: 240px">
    <template #suffix-icon>
      <i class="m-icon icon-setting" />
    </template>
  </m-input>
</template>
<script setup>
const treeData = [
  {
    id: '1',
    label: 'Level one 1',
    children: [
      {
        id: '1-1',
        label: 'Level two 1-1',
        children: [
          {
            id: '1-1-1',
            label: 'Level three 1-1-1',
          },
        ],
      },
    ],
  },
  {
    id: '2',
    label: 'Level one 2',
    children: [
      {
        id: '2-1',
        label: 'Level two 2-1',
        children: [
          {
            id: '2-1-1',
            label: 'Level three 2-1-1',
          },
        ],
      },
      {
        id: '2-2',
        label: 'Level two 2-2',
        children: [
          {
            id: '2-2-1',
            label: 'Level three 2-2-1',
          },
        ],
      },
    ],
  },
  {
    id: '3',
    label: 'Level one 3',
    children: [
      {
        id: '3-1',
        label: 'Level two 3-1',
        children: [
          {
            id: '3-1-1',
            label: 'Level three 3-1-1',
          },
        ],
      },
      {
        id: '3-2',
        label: 'Level two 3-2',
        children: [
          {
            id: '3-2-1',
            label: 'Level three 3-2-1',
          },
        ],
      },
    ],
  },
]
</script>
<template>
  <div>
    <m-tree show-checkbox :data="treeData" />
  </div>
</template>
<script setup>
const treeData = [
  {
    id: '1',
    label: 'Level one 1',
    children: [
      {
        id: '1-1',
        label: 'Level two 1-1',
        children: [
          {
            id: '1-1-1',
            label: 'Level three 1-1-1',
          },
        ],
      },
    ],
  },
  {
    id: '2',
    label: 'Level one 2',
    children: [
      {
        id: '2-1',
        label: 'Level two 2-1',
        children: [
          {
            id: '2-1-1',
            label: 'Level three 2-1-1',
          },
        ],
      },
      {
        id: '2-2',
        label: 'Level two 2-2',
        children: [
          {
            id: '2-2-1',
            label: 'Level three 2-2-1',
          },
        ],
      },
    ],
  },
  {
    id: '3',
    label: 'Level one 3',
    children: [
      {
        id: '3-1',
        label: 'Level two 3-1',
        children: [
          {
            id: '3-1-1',
            label: 'Level three 3-1-1',
          },
        ],
      },
      {
        id: '3-2',
        label: 'Level two 3-2',
        children: [
          {
            id: '3-2-1',
            label: 'Level three 3-2-1',
          },
        ],
      },
    ],
  },
]
</script>
<template>
  <div>
    <m-tree :data="treeData" />
  </div>
</template>
<template>
  <div style="width: 500px; margin: 0 auto">
    <div style="display: flex; justify-content: center; gap: 20px">
      <m-tooltip content="我是文字提示" placement="top-start">
        <m-button type="primary" plain size="mini">
          top-start
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="top">
        <m-button type="primary" plain size="mini">
          top
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="top-end">
        <m-button type="primary" plain size="mini">
          top-end
        </m-button>
      </m-tooltip>
    </div>
    <div
      class="row"
      style="display: flex; justify-content: space-between; margin: 10px 0"
    >
      <m-tooltip content="我是文字提示" placement="left-start">
        <m-button type="primary" plain size="mini">
          left-start
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="right-start">
        <m-button type="primary" plain size="mini">
          right-start
        </m-button>
      </m-tooltip>
    </div>
    <div
      class="row"
      style="display: flex; justify-content: space-between; margin: 10px 0"
    >
      <m-tooltip content="我是文字提示" placement="left">
        <m-button type="primary" plain size="mini">
          left
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="right">
        <m-button type="primary" plain size="mini">
          right
        </m-button>
      </m-tooltip>
    </div>
    <div
      class="row"
      style="display: flex; justify-content: space-between; margin: 10px 0"
    >
      <m-tooltip content="我是文字提示" placement="left-end">
        <m-button type="primary" plain size="mini">
          left-end
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="right-end">
        <m-button type="primary" plain size="mini">
          right-end
        </m-button>
      </m-tooltip>
    </div>
    <div
      class="row"
      style="display: flex; justify-content: center; gap: 20px; margin: 10px 0"
    >
      <m-tooltip content="我是文字提示" placement="bottom-start">
        <m-button type="primary" plain size="mini">
          bottom-start
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="bottom">
        <m-button type="primary" plain size="mini">
          bottom
        </m-button>
      </m-tooltip>
      <m-tooltip content="我是文字提示" placement="bottom-end">
        <m-button type="primary" plain size="mini">
          bottom-end
        </m-button>
      </m-tooltip>
    </div>
  </div>
</template>
<template>
  <m-tooltip
    content="小天狼星·布莱克是一名纯血巫师，是布莱克家族的唯一继承人，是詹姆斯·波特的好友，也是哈利波特的教父。"
    :width="150"
  >
    <m-button type="primary" plain>
      小天狼星
    </m-button>
  </m-tooltip>
</template>
<template>
  <m-tooltip content="邓布利多是当今魔法世界最伟大的巫师">
    <m-button type="primary" plain>
      邓布利多
    </m-button>
  </m-tooltip>
</template>
<script setup>
import { ref } from 'vue'
const switchValue = ref(true)
</script>
<template>
  <m-switch v-model="switchValue" type="primary" />
  <m-switch v-model="switchValue" type="success" />
  <m-switch v-model="switchValue" type="info" />
  <m-switch v-model="switchValue" type="warning" />
  <m-switch v-model="switchValue" type="danger" />
</template>
<script setup>
import { ref } from 'vue'
const switchValue = ref(true)
</script>
<template>
  <m-switch v-model="switchValue" active-text="Open" inactive-text="Close" />
  <p />
  <m-switch v-model="switchValue" active-text="Open" inactive-text="Close" inline-prompt />
</template>
<script setup>
import { ref } from 'vue'
const switchValue = ref(true)
</script>
<template>
  <m-switch v-model="switchValue" />
</template>
<script setup>
const column = [
  {
    key: 'name',
    label: '姓名',
    width: 150,
    align: 'center',
  },
  {
    key: 'age',
    label: '年龄',
    width: 100,
    align: 'center',
  },
  {
    key: 'college',
    label: '学院',
    width: 120,
    align: 'center',
  },
]
const tableData = [
  {
    name: 'muggle',
    age: '23',
    college: '斯莱特林',
  },
  {
    name: 'harry',
    age: '24',
    college: '格兰芬多',
  },
  {
    name: 'hermione',
    age: '25',
    college: '拉文克劳',
  },
  {
    name: 'ron',
    age: '23',
    college: '赫奇帕奇',
  },
  {
    name: 'luna',
    age: '24',
    college: '拉文克劳',
  },
  {
    name: 'ginny',
    age: '23',
    college: '格兰芬多',
  },
  {
    name: 'neville',
    age: '25',
    college: '格兰芬多',
  },
]
</script>
<template>
  <m-table :column="column" :data="tableData" height="200" />
</template>
<script setup>
const column = [
  {
    key: 'name',
    label: '姓名',
    width: 150,
  },
  {
    key: 'age',
    label: '年龄',
    width: 100,
  },
  {
    key: 'college',
    label: '学院',
    width: 120,
  },
]
const tableData = [
  {
    name: 'muggle',
    age: '23',
    college: '斯莱特林',
  },
  {
    name: 'harry',
    age: '24',
    college: '格兰芬多',
  },
  {
    name: 'hermione',
    age: '25',
    college: '拉文克劳',
  },
  {
    name: 'ron',
    age: '23',
    college: '赫奇帕奇',
  },
]
</script>
<template>
  <m-table :column="column" :data="tableData">
    <!-- 具名作用域插槽,指定具体的列,填入自定义内容 -->
    <template #name="{ row }">
      👍{{ row.name }}
    </template>
    <template #college="{ row }">
      🏫{{ row.college }}
    </template>
  </m-table>
</template>
<script setup>
const column = [
  {
    key: 'name',
    label: '姓名',
    width: 150,
    align: 'center',
  },
  {
    key: 'age',
    label: '年龄',
    width: 100,
    align: 'center',
  },
  {
    key: 'college',
    label: '学院',
    width: 120,
    align: 'center',
  },
]
const tableData = [
  {
    name: 'muggle',
    age: '23',
    college: '斯莱特林',
  },
  {
    name: 'harry',
    age: '24',
    college: '格兰芬多',
  },
  {
    name: 'hermione',
    age: '25',
    college: '拉文克劳',
  },
  {
    name: 'ron',
    age: '23',
    college: '赫奇帕奇',
  },
]
</script>
<template>
  <m-table :column="column" :data="tableData" />
</template>
<script setup>
import { ref } from 'vue'
const active = ref(0)
function nextStep() {
  active.value++
  if (active.value > 4)
    active.value = 0
}
</script>
<template>
  <div>
    <m-steps :active="active" align="center">
      <m-step icon="smile" title="first" description="起床" />
      <m-step icon="electronics" title="second" description="工作" />
      <m-step icon="customer-service" title="third" description="听歌" />
      <m-step icon="work" title="fourth" description="下班" />
      <m-step icon="hide" title="fifth" description="睡觉" />
    </m-steps>
    <br>
    <m-button type="primary" size="mini" @click="nextStep">
      next
    </m-button>
  </div>
</template>
<style scoped>
</style>
<script setup>
import { ref } from 'vue'
const active = ref(0)
function nextStep() {
  active.value++
  if (active.value > 4)
    active.value = 0
}
</script>
<template>
  <div>
    <m-steps :active="active">
      <m-step icon="smile" title="first" description="起床" />
      <m-step icon="electronics" title="second" description="工作" />
      <m-step icon="customer-service" title="third" description="听歌" />
      <m-step icon="work" title="fourth" description="下班" />
      <m-step icon="hide" title="fifth" description="睡觉" />
    </m-steps>
    <br>
    <m-button type="primary" size="mini" @click="nextStep">
      next
    </m-button>
  </div>
</template>
<style scoped>
</style>
<script setup>
import { ref } from 'vue'
const active = ref(0)
function nextStep() {
  active.value++
  if (active.value > 4)
    active.value = 0
}
</script>
<template>
  <div>
    <m-steps :active="active">
      <m-step title="first" description="变形课" />
      <m-step title="second" description="魔药课" />
      <m-step title="third" description="神奇动物保护课" />
      <m-step title="fourth" description="飞行课" />
      <m-step title="fifth" description="黑魔法防御课" />
    </m-steps>
    <br>
    <m-button type="primary" size="mini" @click="nextStep">
      next
    </m-button>
  </div>
</template>
<style scoped>
</style>
<script setup>
import { computed, getCurrentInstance, inject, onMounted, ref } from 'vue'
import { Props } from './step'
defineOptions({
  name: 'MStep',
})
defineProps(Props)
const getStepIndex = inject('getStepIndex') 
const stepIndexList = inject('stepIndexList') 
const active = inject('active') 
const currentIndex = ref()
onMounted(() => {
  currentIndex.value = getStepIndex()
})
</script>
<!-- isFirstStep和isLastStep、is_last_step为何需要做样式区分？ -->
<template>
  <!-- isComplete全蓝，is_begining线蓝，其余灰 -->
  <div
    class="m-step"
    :class="{
      is_complete: (currentIndex || 0) <= active - 1,
      is_begining: (currentIndex || 0) === active,
      is_last_step: (currentIndex || 0) === stepIndexList.length - 1,
    }"
  >
    <div class="m-step__container">
      <!-- 1. 头部 -->
      <div class="m-step__head">
        <!-- 内部填充 -->
        <span
          class="m-step__icon m-icon"
          :class="`${icon ? `icon-${icon}` : ''}`"
        >
          <!-- 有icon显示icon，没icon显示当前步数 -->
          {{ icon ? "" : (currentIndex || 0) + 1 }}
        </span>
        <!-- 若不是最后一步，则向外延申一条线 -->
        <div
          v-if="currentIndex !== stepIndexList.length - 1"
          class="m-step__line"
        />
      </div>
      <!-- 2. 底部描述 -->
      <div
        class="m-step__content"
        :class="{
          isFirstStep: currentIndex === 0,
          isLastStep: currentIndex === stepIndexList.length - 1,
        }"
      >
        <!-- 标题 -->
        <div class="m-step__title">
          {{ title }}
        </div>
        <!-- 描述 -->
        <div
          v-if="description"
          class="m-step__description"
        >
          {{ description }}
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  title: {
    type: String,
    default: '',
  },
  description: {
    type: String,
    default: '',
  },
  icon: {
    type: String,
    default: '',
  },
}
<script setup>
import { computed, getCurrentInstance, inject } from 'vue'
import { Props } from './step'
defineOptions({
  name: 'MStep',
})
defineProps(Props)
const instance = getCurrentInstance() 
const childrenUid = inject('childrenUid') 
const active = inject('active') 
const currentIndex = computed(() => {
  let index = null
  if (Array.isArray(childrenUid.value))
    index = childrenUid.value.findIndex(item => item === instance.uid)
  return index
})
</script>
<!-- isFirstStep和isLastStep、is_last_step为何需要做样式区分？ -->
<template>
  <!-- isComplete全蓝，is_begining线蓝，其余灰 -->
  <div
    class="m-step"
    :class="{
      is_complete: (currentIndex || 0) <= active - 1,
      is_begining: (currentIndex || 0) === active,
      is_last_step: (currentIndex || 0) === childrenUid.length - 1,
    }"
  >
    <div class="m-step__container">
      <!-- 1. 头部 -->
      <div class="m-step__head">
        <!-- 内部填充 -->
        <span
          class="m-step__icon m-icon"
          :class="`${icon ? `icon-${icon}` : ''}`"
        >
          <!-- 有icon显示icon，没icon显示当前步数 -->
          {{ icon ? "" : (currentIndex || 0) + 1 }}
        </span>
        <!-- 若不是最后一步，则向外延申一条线 -->
        <div
          v-if="currentIndex !== childrenUid.length - 1"
          class="m-step__line"
        />
      </div>
      <!-- 2. 底部描述 -->
      <div
        class="m-step__content"
        :class="{
          isFirstStep: currentIndex === 0,
          isLastStep: currentIndex === childrenUid.length - 1,
        }"
      >
        <!-- 标题 -->
        <div class="m-step__title">
          {{ title }}
        </div>
        <!-- 描述 -->
        <div
          v-if="description"
          class="m-step__description"
        >
          {{ description }}
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
<script setup>
import { ref } from 'vue'
const options = [
  {
    label: 'option1',
    value: '1',
  },
  {
    label: 'option2',
    value: '2',
  },
  {
    label: 'option3',
    value: '3',
  },
  {
    label: 'option4',
    value: '4',
  },
]
const selectValue = ref('')
</script>
<template>
  <m-select
    v-model="selectValue"
    style="width: 240px"
    :option="options"
    search
  />
</template>
<script setup>
import { ref } from 'vue'
const options = [
  {
    label: 'option1',
    value: '1',
  },
  {
    label: 'option2',
    value: '2',
    disabled: true,
  },
  {
    label: 'option3',
    value: '3',
  },
  {
    label: 'option4',
    value: '4',
  },
]
const selectValue = ref('1')
</script>
<template>
  <m-select
    v-model="selectValue"
    style="width: 240px"
    :option="options"
  />
</template>
<script setup>
import { ref } from 'vue'
const options = [
  {
    label: 'option1',
    value: '1',
  },
  {
    label: 'option2',
    value: '2',
  },
  {
    label: 'option3',
    value: '3',
  },
  {
    label: 'option4',
    value: '4',
  },
]
const selectValue = ref('')
</script>
<template>
  <m-select
    v-model="selectValue"
    style="width: 240px"
    :option="options"
  />
</template>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Step from './src/step.vue'
export const MStep = withInstall(Step)
export default MStep
<script setup>
import { ref } from 'vue'
const currentPage = ref(1)
</script>
<template>
  <m-pagination v-model:current-page="currentPage" total="1000" page-size="20" show-jump />
</template>
<style scoped>
</style>
<script setup>
import { ref } from 'vue'
const currentPageOne = ref(1)
const currentPageTwo = ref(1)
</script>
<template>
  <m-pagination v-model:current-page="currentPageOne" total="50" page-size="10" />
  <m-pagination v-model:current-page="currentPageTwo" total="100" page-size="10" />
</template>
<style scoped>
</style>
<script setup>
import { MMessage } from '@muggle-ui/components'
function openMesaage(type) {
  MMessage({
    type,
    message: `This is a ${type} message`,
    showClose: true, 
  })
}
</script>
<template>
  <m-button type="success" @click="openMesaage('success')">
    success
  </m-button>
</template>
<script setup>
import { MMessage } from '@muggle-ui/components'
function openMesaage(type) {
  MMessage({
    type,
    message: `This is a ${type} message`,
  })
}
</script>
<template>
  <m-button type="success" @click="openMesaage('success')">
    success
  </m-button>
  <m-button type="info" @click="openMesaage('info')">
    info
  </m-button>
  <m-button type="warning" @click="openMesaage('warning')">
    warning
  </m-button>
  <m-button type="danger" @click="openMesaage('error')">
    error
  </m-button>
</template>
<template>
  <m-icon :size="20" name="chart-bar" color="#abf123" />
  <m-icon :size="20" name="data-view" color="#ab1553" />
  <m-icon :size="20" name="copy" color="#bdb253" />
</template>
<template>
  <m-icon :size="20" name="chart-bar" />
  <m-icon :size="30" name="data-view" />
  <m-icon :size="40" name="copy" />
</template>
<template>
  <m-icon :size="20" name="chart-bar" />
  <m-icon :size="20" name="data-view" />
  <m-icon :size="20" name="copy" />
</template>
<script setup>
import { ref } from 'vue'
const ruleForm = ref({
  name: '',
  age: '',
  college: '',
  class: {
    check1: false,
    check2: false,
    check3: false,
    check4: false,
    check5: false,
  },
  agree: false,
})
const ruleFormRef = ref()
const rules = {
  name: [
    { required: true, message: '请输入姓名', trigger: 'blur' },
    { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' },
  ],
  age: [
    { required: true, message: '请输入年龄', trigger: 'blur' },
  ],
  college: [
    { required: true, message: '请选择学院', trigger: 'change' },
  ],
}
const options = [
  {
    label: '格兰芬多',
    value: '1',
  },
  {
    label: '斯莱特林',
    value: '2',
  },
  {
    label: '拉文克劳',
    value: '3',
  },
  {
    label: '赫奇帕奇',
    value: '4',
  },
]
async function submitForm(formRef) {
  if (!formRef)
    return
  await formRef.validate((valid, fields) => {
    if (valid)
      console.log('submit!')
    else
      console.log('error!', ruleForm.value.age, fields)
  })
}
function resetForm(formRef) {
  if (!formRef)
    return
  formRef.resetFields()
}
</script>
<template>
  <div>
    <m-form ref="ruleFormRef" :model="ruleForm" :rules="rules" label-width="120px">
      <m-form-item item-name="name" label="姓名">
        <m-input v-model="ruleForm.name" placeholder="请输入你的名字" />
      </m-form-item>
      <m-form-item item-name="age" label="年龄">
        <m-input v-model="ruleForm.age" placeholder="请输入你的年龄" />
      </m-form-item>
      <m-form-item item-name="college" label="学院">
        <m-select
          v-model="ruleForm.college"
          :option="options"
          placeholder="请选择"
        />
      </m-form-item>
      <m-form-item item-name="class" label="课程">
        <m-checkbox v-model="ruleForm.class.check1">
          魔药课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check2">
          变形课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check3">
          占卜课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check4">
          神奇动物保护课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check5">
          黑魔法防御课
        </m-checkbox>
      </m-form-item>
      <m-form-item item-name="agree" label="同意入学">
        <m-switch v-model="ruleForm.agree" active-text="agree" inactive-text="disagree" inline-prompt />
      </m-form-item>
      <m-form-item>
        <m-button @click.prevent="submitForm(ruleFormRef)">
          Submit
        </m-button>
        <m-button @click.prevent="resetForm(ruleFormRef)">
          Reset
        </m-button>
      </m-form-item>
    </m-form>
  </div>
</template>
<script setup>
import { ref } from 'vue'
const ruleForm = ref({
  name: '',
  age: '',
  college: '',
  class: {
    check1: false,
    check2: false,
    check3: false,
    check4: false,
    check5: false,
  },
  agree: false,
})
const ruleFormRef = ref()
const options = [
  {
    label: '格兰芬多',
    value: '1',
  },
  {
    label: '斯莱特林',
    value: '2',
  },
  {
    label: '拉文克劳',
    value: '3',
  },
  {
    label: '赫奇帕奇',
    value: '4',
  },
]
function submitForm() {
  console.log('submit!')
}
</script>
<template>
  <div>
    <m-form ref="ruleFormRef" :model="ruleForm" label-width="120px">
      <m-form-item item-name="name" label="姓名">
        <m-input v-model="ruleForm.name" placeholder="请输入你的名字" />
      </m-form-item>
      <m-form-item item-name="age" label="年龄">
        <m-input v-model="ruleForm.age" placeholder="请输入你的年龄" />
      </m-form-item>
      <m-form-item item-name="college" label="学院">
        <m-select
          v-model="ruleForm.college"
          :option="options"
          placeholder="请选择"
        />
      </m-form-item>
      <m-form-item item-name="class" label="课程">
        <m-checkbox v-model="ruleForm.class.check1">
          魔药课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check2">
          变形课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check3">
          占卜课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check4">
          神奇动物保护课
        </m-checkbox>
        <m-checkbox v-model="ruleForm.class.check5">
          黑魔法防御课
        </m-checkbox>
      </m-form-item>
      <m-form-item item-name="agree" label="同意入学">
        <m-switch v-model="ruleForm.agree" active-text="agree" inactive-text="disagree" inline-prompt />
      </m-form-item>
      <m-form-item>
        <m-button @click.prevent="submitForm(ruleFormRef)">
          Submit
        </m-button>
      </m-form-item>
    </m-form>
  </div>
</template>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Icon from './src/icon.vue'
export const MIcon = withInstall(Icon)
export default MIcon
<script setup>
import { ref } from 'vue'
import { MMessage } from '@muggle-ui/components'
const showDialog = ref(false)
const showCloseTips = ref(false)
function dialogOK() {
  MMessage({
    type: 'success',
    message: '已确认入学通知',
  })
}
function beforeClose(closeDialog) {
  showCloseTips.value = true
  setTimeout(() => {
    showCloseTips.value = false
    closeDialog()
  }, 2000)
}
</script>
<template>
  <div>
    <m-button @click="showDialog = true">
      open
    </m-button>
    <m-dialog v-model="showDialog" title="入学通知" width="500px" :before-close="beforeClose" @ok="dialogOK">
      我们很高兴通知您，您已获准在霍格沃茨魔法学校就读。随信附赠所需书籍和物品一览表。学期开始于九月一日。我们将于七月三十一日前静候您的猫头鹰带来的回信。
      <p v-show="showCloseTips" style="color:red">
        2秒钟后关闭
      </p>
    </m-dialog>
  </div>
</template>
<style scoped>
</style>
<script setup>
import { ref } from 'vue'
import { MMessage } from '@muggle-ui/components'
const showDialog = ref(false)
</script>
<template>
  <div>
    <m-button @click="showDialog = true">
      open
    </m-button>
    <m-dialog v-model="showDialog" title="入学通知" width="500px">
      我们很高兴通知您，您已获准在霍格沃茨魔法学校就读。随信附赠所需书籍和物品一览表。学期开始于九月一日。我们将于七月三十一日前静候您的猫头鹰带来的回信。
    </m-dialog>
  </div>
</template>
<style scoped>
</style>
<template>
  <!-- align = 'top' | 'middle' | 'bottom' -->
  <m-row align="top">
    <m-col :span="4">
      <div class="a" />
      <div class="b" />
      <div class="a" />
    </m-col>
  </m-row>
</template>
<script setup>
import { ref } from 'vue'
const checkbox1 = ref(false)
const checkbox2 = ref(false)
</script>
<template>
  <m-checkbox v-model="checkbox1" label="option2" disabled>
    🎉Muggle
  </m-checkbox>
  <m-checkbox v-model="checkbox2" label="option2" disabled>
    🎉Wizar
  </m-checkbox>
</template>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Tree from './src/tree.vue'
export const MTree = withInstall(Tree)
export default MTree
<script setup>
import { ref } from 'vue'
const checkbox1 = ref(true)
const checkbox2 = ref(false)
const checkbox3 = ref(false)
</script>
<template>
  <!-- 若无插槽内容，默认填充label -->
  <m-checkbox v-model="checkbox1" label="option1" />
  <m-checkbox v-model="checkbox2" label="option2">
    🎉Muggle
  </m-checkbox>
  <m-checkbox v-model="checkbox3" label="option2">
    🎉Wizar
  </m-checkbox>
</template>
<template>
  <!-- justify = 'start' | 'end' | 'center' | 'space-around' | 'space-between' | 'space-evenly' 水平对齐方式 -->
  <m-row justify="start">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row justify="center">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row justify="end">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row justify="space-around">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row justify="space-between">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row justify="space-evenly">
    <m-col :span="4">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="4">
      <div class="a" />
    </m-col>
  </m-row>
</template>
<template>
  <!-- gutter单位为px，列间隔 -->
  <m-row gutter="10">
    <m-col :span="8">
      <div class="a" />
    </m-col>
    <m-col :span="8">
      <div class="b" />
    </m-col>
    <m-col :span="8">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row gutter="40">
    <m-col :span="8">
      <div class="a" />
    </m-col>
    <m-col :span="8">
      <div class="b" />
    </m-col>
    <m-col :span="8">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row gutter="70">
    <m-col :span="8">
      <div class="a" />
    </m-col>
    <m-col :span="8">
      <div class="b" />
    </m-col>
    <m-col :span="8">
      <div class="a" />
    </m-col>
  </m-row>
</template>
<template>
  <!-- span可调的值为0-24，表示基于父容器的占比 -->
  <m-row>
    <m-col :span="12">
      <div class="a" />
    </m-col>
    <m-col :span="12">
      <div class="b" />
    </m-col>
  </m-row>
  <m-row>
    <m-col :span="8">
      <div class="a" />
    </m-col>
    <m-col :span="8">
      <div class="b" />
    </m-col>
    <m-col :span="8">
      <div class="a" />
    </m-col>
  </m-row>
  <m-row>
    <m-col :span="6">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
    <m-col :span="6">
      <div class="a" />
    </m-col>
    <m-col :span="6">
      <div class="b" />
    </m-col>
  </m-row>
</template>
<script setup>
import { ref } from 'vue'
const activeNames = ref(['1'])
</script>
<template>
  <m-collapse v-model="activeNames" accordion>
    <m-collapse-item title="Champage Problem" name="1">
      <div>
        One for the Money, Two for the Show,I never was ready so I watch you go.
      </div>
    </m-collapse-item>
    <m-collapse-item title="All To Well" name="2">
      <div>
        And you were tossing me the car keys, Fuck the patriarchy Keychain on the ground
      </div>
    </m-collapse-item>
    <m-collapse-item title="Fortnight" name="3">
      <div>
        I was suppose to be sent away but they forgot to come and get me
      </div>
    </m-collapse-item>
    <m-collapse-item title="Enchanted" name="4">
      <div>
        Please don't be in love with someone else, please don't have somebody waiting on you
      </div>
    </m-collapse-item>
  </m-collapse>
</template>
<script setup>
import { ref } from 'vue'
const activeNames = ref([])
</script>
<template>
  <m-collapse v-model="activeNames">
    <m-collapse-item title="Champage Problem" name="1">
      <div>
        One for the Money, Two for the Show,I never was ready so I watch you go.
      </div>
    </m-collapse-item>
    <m-collapse-item title="All To Well" name="2">
      <div>
        And you were tossing me the car keys, Fuck the patriarchy Keychain on the ground
      </div>
    </m-collapse-item>
    <m-collapse-item title="Fortnight" name="3">
      <div>
        I was suppose to be sent away but they forgot to come and get me
      </div>
    </m-collapse-item>
    <m-collapse-item title="Enchanted" name="4">
      <div>
        Please don't be in love with someone else, please don't have somebody waiting on you
      </div>
    </m-collapse-item>
  </m-collapse>
</template>
<template>
  <!-- 颜色状态 -->
  <m-button type="primary">
    primary
  </m-button>
  <m-button type="success">
    success
  </m-button>
  <m-button type="info">
    info
  </m-button>
  <m-button type="warning">
    warning
  </m-button>
  <m-button type="danger">
    danger
  </m-button>
</template>
<template>
  <m-button type="primary" size="">
    default
  </m-button>
  <m-button type="primary" size="small">
    small
  </m-button>
  <m-button type="primary" size="mini">
    mini
  </m-button>
</template>
<script setup>
import { ref } from 'vue'
const checkboxGroup = ref(['option1'])
</script>
<template>
  <m-checkbox-group v-model="checkboxGroup">
    <m-checkbox label="option1">
      🎉muggle
    </m-checkbox>
    <m-checkbox label="option2">
      🎉wizar
    </m-checkbox>
  </m-checkbox-group>
  <p style="font-size: 13px">
    目前选中：{{ checkboxGroup }}
  </p>
</template>
<style scoped>
</style>
<template>
  <m-button type="primary" plain>
    primary
  </m-button>
  <m-button type="success" plain>
    success
  </m-button>
  <m-button type="info" plain>
    info
  </m-button>
  <m-button type="warning" plain>
    warning
  </m-button>
  <m-button type="danger" plain>
    danger
  </m-button>
</template>
<template>
  <!-- 颜色状态 -->
  <m-button type="primary" icon="chart-bar" />
  <m-button type="success" icon="data-view" />
  <m-button type="info" icon="copy" />
</template>
<template>
  <!-- 颜色状态 -->
  <m-button type="primary" disabled>
    primary
  </m-button>
  <m-button type="success" disabled>
    success
  </m-button>
  <m-button type="info" disabled>
    info
  </m-button>
  <m-button type="warning" disabled>
    warning
  </m-button>
  <m-button type="danger" disabled>
    danger
  </m-button>
</template>
<template>
  <m-button type="primary" round>
    primary
  </m-button>
  <m-button type="success" round>
    success
  </m-button>
  <m-button type="info" round>
    info
  </m-button>
  <m-button type="warning" round>
    warning
  </m-button>
  <m-button type="danger" round>
    danger
  </m-button>
</template>
<script setup>
import { ref, watch } from 'vue'
import MTreeNode from './tree-node.vue'
import { Props } from './tree.ts'
const props = defineProps(Props)
const tree = ref([])
watch(() => props.data, (newValue) => {
  tree.value = newValue
}, { immediate: true })
function handleClick(node) {
  findNode(tree.value, node.id, changeShowChild)
}
function changeShowChild(node) {
  node.showChild = !node.showChild
}
function handleCheck(node) {
  findNode(tree.value, node.id, changeCheck)
}
function changeCheck(node) {
  node.isChecked = !node.isChecked
  if (node.children && node.children.length)
    changeChildCheck(node.children, node.isChecked)
  changeParentCheck(tree.value, node.id)
}
function changeChildCheck(children, isChecked) {
  children.forEach((item) => {
    item.isChecked = isChecked
    if (item.children && item.children.length)
      changeChildCheck(item.children, isChecked)
  })
}
function changeParentCheck(children, id, parent) {
  try {
    children.forEach((node) => {
      if (node.id === id) {
        const result = children.every(item => item.isChecked === true)
        if (parent && parent.isChecked === result) {
          throw new Error('Stop Loop')
        }
        else if (parent && parent.isChecked !== result) {
          parent.isChecked = result
          parent && changeParentCheck(tree.value, parent.id)
        }
      }
      else if (node.children && node.children.length) {
        changeParentCheck(node.children, id, node)
      }
    })
  }
  catch (error) {
    if (error.message !== 'Stop Loop')
      throw error
  }
}
function findNode(data, id, handleFun) {
  let obj = null
  try {
    data.forEach((item) => {
      if (item.id === id) {
        obj = item
        handleFun(item)
        throw new Error('Stop Loop')
      }
      else if (item.children && item.children.length) {
        findNode(item.children, id, handleFun)
      }
    })
  }
  catch (error) {
    if (error.message !== 'Stop Loop')
      throw error
  }
  return obj
}
</script>
<template>
  <div class="m-tree">
    <MTreeNode
      v-for="node in tree"
      :key="node.id"
      :show-checkbox="showCheckbox"
      :node="node"
      @handle-click="handleClick"
      @handle-check="handleCheck"
    />
  </div>
</template>
<style scoped>
</style>
export const Props = {
  data: {
    type: Array,
    default: () => [],
  },
  showCheckbox: {
    type: Boolean,
    default: false,
  },
}
<script setup>
import { computed } from 'vue'
import { Props } from './tree-node.ts'
defineOptions({
  name: 'MTreeNode',
})
const props = defineProps(Props)
const emit = defineEmits(['handleClick', 'handleCheck'])
const getCheckType = computed(() => {
  let checkType = ''
  if (props.node.isChecked)
    checkType = 'all'
  else if (
    props.node.children
    && props.node.children.every(item => item.isChecked === true)
  )
    checkType = 'all'
  else if (
    props.node.children
    && props.node.children.some(item => item.isChecked === true)
  )
    checkType = 'some'
  else
    checkType = 'none'
  return checkType
})
function clickNode(node) {
  if (node.children && node.children.length)
    emit('handleClick', node)
}
function handleCheck(node) {
  emit('handleCheck', node)
}
</script>
<template>
  <div class="m-tree-node">
    <!-- 主节点，props在模板上可以直接使用 -->
    <div class="m-tree-node__content" @click.stop="clickNode(node)">
      <!-- 三角符号：若children存在，则展示三角符号，若showchild为1，则三角符号旋转90度 -->
      <div
        class="m-icon icon-arrow-right-filling"
        :style="{
          visibility: node.children && node.children.length ? 'visible' : 'hidden',
          transform: node.showChild ? 'rotateZ(90deg)' : '',
        }"
      />
      <!-- 复选框 -->
      <span
        v-if="showCheckbox"
        :class="`m-tree-node__checkbox ${getCheckType}`"
        @click.self.stop="handleCheck(node)"
      />
      <!-- 标签内容 -->
      <span class="m-tree-node__label">{{ node.label }}</span>
      <div><slot /></div>
    </div>
    <!-- 子节点 -->
    <div
      v-if="node.showChild"
      class="m-tree-node__children"
      :style="{
        'grid-template-rows': node.showChild ? '1fr' : '0fr',
      }"
    >
      <div class="m-tree-node__children_reference">
        <!-- 遍历子节点 -->
        <!-- 自定义组件上使用v-for，并传递props，@handleClick为监听事件，若内部用emit触发了该事件，就执行clickNode，其作用其实是一直触发handleClick直至传递到最外层tree组件这，统一定义处理节点展开和关闭的函数，将node一直向上传递 -->
        <MTreeNode
          v-for="child in node.children"
          :key="child.id"
          :node="child"
          :show-checkbox="showCheckbox"
          @handle-click="(node) => clickNode(node)"
          @handle-check="(node) => handleCheck(node)"
        />
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Tooltip from './src/tooltip.vue'
export const MTooltip = withInstall(Tooltip)
export default MTooltip
export const Props = {
  node: {
    type: Object,
    default: () => ({
      id: '',
      label: '',
      showChild: false,
      children: [],
      ischecked: false,
    }),
  },
  showCheckbox: {
    type: Boolean,
    default: false,
  },
}
<script setup>
import { nextTick, ref, watch } from 'vue'
import { Props } from './tooltip'
const props = defineProps(Props)
const show = ref(false)
const tooltipStyle = ref() 
const tooltipRef = ref() 
const arrowDirection = ref('bottom') 
const arrowPosition = ref('center') 
const TOOLTIP_GAP = 7 
let clock
watch(
  () => props.placement,
  (newValue) => {
    if (newValue.includes('top') || !props.placement)
      arrowDirection.value = 'bottom'
    if (newValue.includes('bottom'))
      arrowDirection.value = 'top'
    if (newValue.includes('left'))
      arrowDirection.value = 'right'
    if (newValue.includes('right'))
      arrowDirection.value = 'left'
    if (newValue === 'top-start' || newValue === 'bottom-start')
      arrowPosition.value = 'row_start'
    if (newValue === 'top-end' || newValue === 'bottom-end')
      arrowPosition.value = 'row_end'
    if (newValue === 'left-start' || newValue === 'right-start')
      arrowPosition.value = 'col_start'
    if (newValue === 'left-end' || newValue === 'right-end')
      arrowPosition.value = 'col_end'
  },
  {
    immediate: true,
  },
)
function handleMouseEnter(e) {
  clearCloseClock()
  const { offsetWidth, offsetHeight } = e.target
  const { top, left } = e.target.getBoundingClientRect()
  show.value = true
  tooltipStyle.value = {
    width: props.width ? `${props.width}px` : 'auto',
  }
  nextTick(() => {
    const { L, T } = getPosition(
      offsetWidth,
      offsetHeight,
      left,
      top,
      props.width || tooltipRef.value?.offsetWidth || 0,
      tooltipRef.value?.offsetHeight || 0,
    )
    tooltipStyle.value = {
      left: `${L}px`,
      top: `${T}px`,
      width: props.width ? `${props.width}px` : 'auto',
    }
  })
}
function getPosition(width, height, x, y, W, H) {
  let left = 0
  let top = 0
  switch (props.placement) {
    case 'top':
      left = x + width / 2 - W / 2
      top = y - H - TOOLTIP_GAP
      break
    case 'top-start':
      left = x
      top = y - H - TOOLTIP_GAP
      break
    case 'top-end':
      left = x + width - W
      top = y - H - TOOLTIP_GAP
      break
    case 'bottom':
      left = x + width / 2 - W / 2
      top = y + height + TOOLTIP_GAP
      break
    case 'bottom-start':
      left = x
      top = y + height + TOOLTIP_GAP
      break
    case 'bottom-end':
      left = x + width - W
      top = y + height + TOOLTIP_GAP
      break
    case 'left':
      left = x - W - TOOLTIP_GAP
      top = y - (H / 2 - height / 2)
      break
    case 'left-start':
      left = x - W - TOOLTIP_GAP
      top = y
      break
    case 'left-end':
      left = x - W - TOOLTIP_GAP
      top = y + height - H
      break
    case 'right':
      left = x + width + TOOLTIP_GAP
      top = y - (H / 2 - height / 2)
      break
    case 'right-start':
      left = x + width + TOOLTIP_GAP
      top = y
      break
    case 'right-end':
      left = x + width + TOOLTIP_GAP
      top = y + height - H
      break
    default:
      break
  }
  return { L: left, T: top }
}
function closeTooltip() {
  clock = setTimeout(() => {
    show.value = false
  }, 300)
}
function clearCloseClock() {
  if (clock)
    clearInterval(clock)
}
</script>
<template>
  <!-- 主体块 -->
  <div
    class="m-tooltip"
    @mouseenter="handleMouseEnter"
    @mouseleave="closeTooltip"
  >
    <slot />
  </div>
  <!-- 提示块 -->
  <teleport to="#m-popper-container">
    <transition name="fade">
      <div
        v-show="show"
        ref="tooltipRef"
        class="m-tooltip__container"
        :style="tooltipStyle"
        @mouseenter="clearCloseClock"
        @mouseleave="closeTooltip"
      >
        <div class="m-tooltip__inner">
          {{ content }}
          <i :class="`m-tooltip_arrow_${arrowDirection} m-tooltip_arrow_${arrowPosition}`" />
        </div>
      </div>
    </transition>
  </teleport>
</template>
<style scoped>
</style>
const PLACEMENT_VALUE = [
  'top',
  'top-start',
  'top-end',
  'bottom',
  'bottom-start',
  'bottom-end',
  'left',
  'left-start',
  'left-end',
  'right',
  'right-start',
  'right-end',
]
export const Props = {
  content: {
    type: String,
    default: '',
  },
  placement: {
    type: String,
    default: 'top',
    validator: val => PLACEMENT_VALUE.includes(val),
  },
  width: {
    type: Number,
  },
}
<script setup>
import { Props } from './table'
defineProps(Props)
</script>
<template>
  <div class="m-table">
    <!-- 列表头 -->
    <div class="m-table__header--wrapper">
      <table class="m-table__header">
        <thead>
          <tr class="m-table__row">
            <!-- column[{}]: key列标识 label列名 width列宽 align居中方式  -->
            <th
              v-for="th in column"
              :key="`${th.key}_th`"
              class="m-tbale__column"
              :style="{
                width: th.width ? `${th.width}px` : '',
                flex: th.width ? 'none' : 1,
                textAlign: th.align || 'left',
              }"
            >
              {{ th.label }}
            </th>
            <th v-if="height" style="width: 8px" /> <!-- 表格滚动条 -->
          </tr>
        </thead>
      </table>
    </div>
    <!-- 行数据 -->
    <div class="m-table__body--wrapper" :style="{ height: `${height}px` }">
      <table class="m-table__body">
        <tbody>
          <!-- data[{}]: key对应column的列标识key -->
          <tr
            v-for="(tr, index) in data"
            :key="`${index}_tb`"
            class="m-table__row"
            :class="{ 'm-table__row--stripe': stripe && index % 2 }"
          >
            <td
              v-for="(th) in column"
              :key="`${th.key}_td`"
              class="m-tbale__column"
              :style="{
                width: th.width ? `${th.width}px` : '',
                flex: th.width ? 'none' : 1,
                textAlign: th.align || 'left',
              }"
            >
              <!-- 具名作用域插槽,name为列名,:row为子传父,传出每一条行数据 -->
              <slot :name="th.key" :row="tr">
                <!-- 如果无插槽内容,默认显示 -->
                {{ tr[th.key] }}
              </slot>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  column: {
    type: Array,
    default: () => [],
  },
  data: {
    type: Array,
    default: () => [],
  },
  height: {
    type: String,
    default: '',
  },
  stripe: {
    type: Boolean,
    default: true,
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Switch from './src/switch.vue'
export const MSwitch = withInstall(Switch)
export default MSwitch
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Table from './src/table.vue'
export const MTable = withInstall(Table)
export default MTable
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Steps from './src/steps.vue'
export const MSteps = withInstall(Steps)
export default MSteps
<script setup>
import { Props } from './switch.ts'
const props = defineProps(Props)
const emit = defineEmits(['update:modelValue'])
function handleClick() {
  emit('update:modelValue', !props.modelValue)
}
</script>
<template>
  <div class="m-switch" :class="`m-switch__${type}`">
    <!-- inactiveText -->
    <div v-if="!inlinePrompt" class="m-switch__label" :class="{ active: !modelValue }">
      {{ inactiveText }}
    </div>
    <!-- siwtch_core -->
    <div
      class="m-switch__core"
      :class="{ 'is-checked': modelValue }"
      @click="handleClick"
    >
      <!-- 滑动层 -->
      <div class="m-switch__action" />
      <!-- 文本层 -->
      <div class="m-switch__inner">
        {{ inlinePrompt ? (modelValue ? activeText : inactiveText) : "" }}
      </div>
    </div>
    <!-- activeText -->
    <div v-if="!inlinePrompt" class="m-switch__label" :class="{ active: modelValue }">
      {{ activeText }}
    </div>
  </div>
</template>
<style scoped>
</style>
const SWITCH_TYPE = ['primary', 'success', 'info', 'warning', 'danger']
export const Props = {
  modelValue: {
    type: Boolean,
    default: false,
  },
  type: {
    type: String,
    default: 'primary',
    validator(value: string) {
      return SWITCH_TYPE.includes(value)
    },
  },
  activeText: {
    type: String,
    default: '',
  },
  inactiveText: {
    type: String,
    default: '',
  },
  inlinePrompt: {
    type: Boolean,
    default: false,
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Row from './src/row.vue'
export const MRow = withInstall(Row)
export default MRow
<script setup>
import { ref, watch } from 'vue'
import MButton from '../../button'
import { Props } from './dialog'
const props = defineProps(Props)
const emit = defineEmits('ok')
const showDialog = defineModel()
const isOK = ref(false)
function closeDialog() {
  showDialog.value = false
  isOK.value && emit('ok')
  isOK.value = false
}
function handleClose() {
  if (props.beforeClose && props.beforeClose instanceof Function)
    props.beforeClose(closeDialog)
  else
    closeDialog()
}
function handleOk() {
  isOK.value = true
  handleClose()
}
</script>
<template>
  <teleport to="#m-popper-container">
    <!-- 遮罩层 -->
    <transition name="fade">
      <div v-show="showDialog" class="m-mask" />
    </transition>
    <!-- 对话框 -->
    <transition name="scale">
      <div
        v-show="showDialog"
        class="m-dialog"
        :style="{
          width: width.includes('%') || width.includes('px') ? width : `${width}px`,
        }"
      >
        <!-- 头部 -->
        <div class="m-dialog__header">
          <!-- 标题 -->
          <slot name="title">
            {{ title }}
          </slot>
          <!-- 关闭 -->
          <div class="m-dialog__close" @click="handleClose">
            <i class="m-icon icon-close-bold" />
          </div>
        </div>
        <!-- 内容 -->
        <div class="m-dialog__content">
          <slot />
        </div>
        <!-- 底部 -->
        <div class="m-dialog__footer">
          <slot name="footer">
            <div class="m-dialog__footer_btn_group">
              <MButton type="primary" plain size="mini" @click="handleClose">
                取消
              </MButton>
              <MButton type="primary" size="mini" @click="handleOk">
                确定
              </MButton>
            </div>
          </slot>
        </div>
      </div>
    </transition>
  </teleport>
</template>
<style scoped>
</style>
export const Props = {
  modelValue: {
    type: Boolean,
    default: false,
  },
  title: {
    type: String,
    default: 'title',
  },
  width: {
    type: String || Number,
    default: '50%',
  },
  beforeClose: {
    type: Function,
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Select from './src/select.vue'
export const MSelect = withInstall(Select)
export default MSelect
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Dialog from './src/dialog.vue'
export const MDialog = withInstall(Dialog)
export default MDialog
<script setup>
import { computed, getCurrentInstance, onMounted, provide, ref } from 'vue'
import { Props } from './steps'
const props = defineProps(Props)
const instance = getCurrentInstance() 
const active = computed(() => props.active) 
const childrenUid = ref([]) 
provide('childrenUid', childrenUid)
provide('active', active)
onMounted(() => {
  getChildrenUid(instance)
})
function getChildrenUid(instance) {
  const children = instance.subTree.children.find(t => t.key === '_default')
  if (children) {
    childrenUid.value = children.children
      .filter(vnode => vnode.type.name === 'MStep')
      .map(v => v.component.uid)
  }
  console.log(instance.subTree)
}
</script>
<template>
  <div
    class="m-steps"
    :class="{
      'm-steps__align-center': align === 'center',
    }"
  >
    <!--  -->
    <!--  -->
    <slot />
  </div>
</template>
<style scoped>
</style>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Pagination from './src/pagination.vue'
export const MPagination = withInstall(Pagination)
export default MPagination
const ROW_JUSTIFY_ENUM = [ 
  'start',
  'center',
  'end',
  'space-around',
  'space-between',
  'space-evenly',
]
const ROW_ALIGN_ENUM = ['top', 'middle', 'bottom'] 
export const Props = {
  gutter: {
    type: Number,
  },
  justify: {
    type: String,
    validator(value: string) {
      return ROW_JUSTIFY_ENUM.includes(value)
    },
  },
  align: {
    type: String,
    validator(value: string) {
      return ROW_ALIGN_ENUM.includes(value)
    },
  },
}
<script setup>
import { computed, getCurrentInstance, onMounted, provide, ref } from 'vue'
import { Props } from './steps'
const props = defineProps(Props)
const active = computed(() => props.active) 
const index = ref(0)
const stepIndexList = ref([])
provide('getStepIndex', getStepIndex)
provide('stepIndexList', stepIndexList)
provide('active', active)
function getStepIndex() {
  const temp = index.value
  stepIndexList.value.push(index.value++)
  return temp
}
</script>
<template>
  <div
    class="m-steps"
    :class="{
      'm-steps__align-center': align === 'center',
    }"
  >
    <slot />
  </div>
</template>
<style scoped>
</style>
const SET_ALIGN = ['center', 'left']
export const Props = {
  active: {
    type: Number,
    default: 0,
  },
  align: {
    type: String,
    default: 'left',
    validator(value) {
      return SET_ALIGN.includes(value)
    },
  },
}
<script setup>
import { computed, onMounted, ref, watch } from 'vue'
import useToggle from '@muggle-ui/utils/toggle.ts'
import { Props } from './select'
const props = defineProps(Props)
const currentSelectedValue = defineModel()
const { trigger, triggerOrigin, showTrigger, suspensionStyle, click } = useToggle()
const isFocus = ref(false) 
const currentSelectedLabel = ref('') 
const keywords = ref('') 
const filterOptions = computed(() =>
  props.option?.filter(item => item.label.includes(keywords.value)),
)
const iconName = computed(() =>
  isFocus.value ? 'icon-arrow-up-bold' : 'icon-arrow-down-bold',
)
function handleClick() {
  isFocus.value = true
  click()
}
function keywordsChange() {
}
function handleChange(item) {
  if (item.disabled)
    return
  currentSelectedLabel.value = item.label
  currentSelectedValue.value = item.value
  keywords.value = ''
  showTrigger.value = false
}
onMounted(() => {
  const currentSelected = props.option?.find(
    item => item.value === currentSelectedValue.value,
  )
  currentSelectedLabel.value = currentSelected ? currentSelected.label : ''
})
</script>
<template>
  <div class="m-select">
    <!-- 原始触发容器 -->
    <div
      ref="triggerOrigin"
      class="m-select__wrapper"
      :class="{ focus: isFocus }"
      @click="handleClick"
    >
      <!-- 选择器 -->
      <!-- @input输入框的值变化时触发，@focus得到焦点时触发，@blur失去焦点时触发 -->
      <input
        :placeholder="currentSelectedLabel || placeholder"
        :disabled="disabled"
        readonly
        class="m-input__inner"
        :class="{
          'has-select': currentSelectedLabel,
        }"
        @input="keywordsChange"
        @focus="keywords = ''"
        @blur="isFocus = false"
      >
      <!-- 箭头 -->
      <div class="m-select__suffix">
        <i :class="`m-icon ${iconName}`" />
      </div>
    </div>
    <!-- 下拉框容器：传送到body下的id为m-popper-container的div -->
    <teleport to="#m-popper-container">
      <div
        v-show="showTrigger"
        ref="trigger"
        class="m-select-options"
        :style="suspensionStyle"
      >
        <!-- 搜索框 -->
        <div v-if="search" class="m-select-search-box">
          <input
            v-model="keywords"
            type="text"
            class="m-input__inner"
            placeholder="请输入关键字"
          >
        </div>
        <!-- 选项列表 -->
        <div
          v-for="item in filterOptions"
          :key="item.value"
          class="m-select-option-item"
          :class="{
            'active': item.value === currentSelectedValue,
            'is-disabled': item.disabled,
          }"
          @click="handleChange(item)"
        >
          <span>{{ item.label }}</span>
        </div>
        <!-- 无符合选项 -->
        <div
          v-show="!filterOptions.length"
          class="m-select-option-item no-result"
        >
          <span>暂无符合选项</span>
        </div>
      </div>
    </teleport>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  option: {
    type: Array,
    default: [],
  },
  placeholder: {
    type: String,
    default: '请选择',
  },
  search: {
    type: Boolean,
    default: false,
  },
}
<script setup>
import { computed } from 'vue'
import { Props } from './row.ts'
const props = defineProps(Props)
const style = computed(() => {
  const { gutter, justify, align } = props 
  return {
    gap: `${gutter || 0}px`,
    justifyContent: justify || 'start',
    alignItem: align || 'flex-start',
  }
})
</script>
<template>
  <div class="m-row" :style="style">
    <slot />
  </div>
</template>
<style scoped>
</style>
import * as components from './components'
import '@muggle-ui/theme-chalk/index.less'
const FUNCTION_COMP = ['MMessage']
function createPopperContainer() {
  if (typeof window !== 'undefined') {
    const popperContainer = document.createElement('div')
    popperContainer.setAttribute('id', 'm-popper-container')
    document.body.append(popperContainer)
  }
}
async function install(app) {
  createPopperContainer()
  Object.entries(components).forEach(([key, value]) => { 
    if (!FUNCTION_COMP.includes(key)) 
      app.component(key, value)
  })
}
export default install
export const MMessage = components.MMessage
<script setup>
import { computed, onMounted, ref, watch } from 'vue'
import { Props } from './pagination'
const props = defineProps(Props)
const emit = defineEmits(['update:current-page', 'current-change'])
onMounted(() => {
  initEllipsis()
})
const pageCount = computed(() =>
  [...Array(Math.ceil(props.total / props.pageSize)).keys()].map(i => i + 1),
)
const firstPage = 1 
const lastPage = computed(() => pageCount.value.length) 
const goToNum = ref(null) 
const showFrontEllipsis = ref(false) 
const showEndEllipsis = ref(false) 
const frontIcon = ref('icon-elipsis') 
const endIcon = ref('icon-elipsis') 
const centerPages = computed(() => {
  if (pageCount.value.length <= 7)
    return pageCount.value.slice(1, -1)
  const pages = []
  const currentPage = props.currentPage
  let start = Math.max(currentPage - 2, 2)
  let end = Math.min(currentPage + 2, lastPage.value - 1)
  if (start <= 2)
    end = Math.min(6, lastPage.value - 1)
  if (end >= lastPage.value - 1)
    start = Math.max(lastPage.value - 5, 2)
  for (let i = start; i <= end; i++)
    pages.push(i)
  return pages
})
watch([() => props.currentPage, () => pageCount.value], () => {
  if (pageCount.value.length > 7) {
    const currentPage = props.currentPage
    showFrontEllipsis.value = currentPage >= 4
    showEndEllipsis.value = currentPage <= lastPage.value - 3
    frontIcon.value = 'icon-elipsis'
    endIcon.value = 'icon-elipsis'
  }
  else {
    showFrontEllipsis.value = false
    showEndEllipsis.value = false
  }
})
function initEllipsis() {
  if (pageCount.value.length > 7) {
    const currentPage = props.currentPage
    const halfTotal = Math.ceil(pageCount.value.length / 2)
    if (currentPage < halfTotal) {
      showFrontEllipsis.value = false
      showEndEllipsis.value = true
    }
    else {
      showFrontEllipsis.value = true
      showEndEllipsis.value = false
    }
    frontIcon.value = 'icon-elipsis'
    endIcon.value = 'icon-elipsis'
  }
}
function handleChangeCurrentPage(page) {
  emit('update:current-page', page)
}
function handlePageGo(direction, num) {
  if (
    (direction === 'forward' && props.currentPage === lastPage.value)
    || (direction === 'retreat' && props.currentPage === firstPage)
  )
    return
  if (direction === 'forward') {
    emit(
      'update:current-page',
      props.currentPage + num > lastPage.value ? lastPage.value : props.currentPage + num,
    )
  }
  else {
    emit(
      'update:current-page',
      props.currentPage - num < firstPage ? firstPage : props.currentPage - num,
    )
  }
}
function handleGoToPage() {
  if (goToNum.value) {
    const targetPageNum
      = goToNum.value < 0 ? 1 : goToNum.value > lastPage.value ? lastPage.value : goToNum.value
    goToNum.value = targetPageNum
    emit('update:current-page', targetPageNum)
  }
}
function handleMouseOver(direction) {
  if (direction === 'left')
    frontIcon.value = 'icon-arrow-double-left'
  else
    endIcon.value = 'icon-arrow-double-right'
}
function handleMouseLeave(direction) {
  if (direction === 'left')
    frontIcon.value = 'icon-elipsis'
  else
    endIcon.value = 'icon-elipsis'
}
</script>
<template>
  <div class="m-pagination">
    <!-- 分页器 -->
    <ul class="m-pagination-list">
      <!-- 上一页 -->
      <li
        class="m-pagination-pre m-icon icon-arrow-left-bold m-pagination-item"
        :style="{
          cursor: firstPage === currentPage ? 'not-allowed' : 'pointer',
          color: firstPage === currentPage ? '#ccc' : null,
        }"
        @click="handlePageGo('retreat', 1)"
      />
      <!-- 首页 -->
      <li
        class="m-pagination-item"
        :class="{
          'm-pagination-item__active': firstPage === currentPage,
        }"
        @click="handleChangeCurrentPage(firstPage)"
      >
        {{ firstPage }}
      </li>
      <!-- 前省略 -->
      <li
        v-if="showFrontEllipsis"
        :class="`m-pagination-item m-icon ${frontIcon}`"
        @mouseenter="handleMouseOver('left')"
        @mouseleave="handleMouseLeave('left')"
        @click="handlePageGo('retreat', 5)"
      />
      <!-- 中间页 -->
      <li
        v-for="page in centerPages"
        :key="page"
        class="m-pagination-item"
        :class="{
          'm-pagination-item__active': page === currentPage,
        }"
        @click="handleChangeCurrentPage(page)"
      >
        {{ page }}
      </li>
      <!-- 后省略 -->
      <li
        v-if="showEndEllipsis"
        :class="`m-pagination-item m-icon ${endIcon}`"
        @mouseenter="handleMouseOver('right')"
        @mouseleave="handleMouseLeave('right')"
        @click="handlePageGo('forward', 5)"
      />
      <!-- 尾页 -->
      <li
        class="m-pagination-item"
        :class="{
          'm-pagination-item__active': lastPage === currentPage,
        }"
        @click="handleChangeCurrentPage(lastPage)"
      >
        {{ lastPage }}
      </li>
      <!-- 下一页 -->
      <li
        class="m-pagination-next m-icon icon-arrow-right-bold m-pagination-item"
        :style="{
          cursor: lastPage === currentPage ? 'not-allowed' : 'pointer',
          color: lastPage === currentPage ? '#ccc' : null,
        }"
        @click="handlePageGo('forward', 1)"
      />
    </ul>
    <!-- 跳转框 -->
    <div v-if="showJump" class="m-pagination__jump">
      <span>Go for</span>
      <input
        v-model="goToNum"
        type="number"
        class="m-pagination__editor"
        @keydown.enter="handleGoToPage"
      >
    </div>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  total: {
    type: Number,
    default: 0,
  },
  pageSize: {
    type: Number,
    default: 10,
  },
  currentPage: {
    type: Number,
    default: 1,
  },
  showJump: {
    type: Boolean,
    default: false,
  },
}
import { h, render } from 'vue'
import Message from './src/message.vue'
let messageInstaceList = []
const MESSAGE_START_TOP = 56 
const MESSAGE_HEIGHT = 44 
const MESSAGE_GAP = 16 
function setDestoryClock(element, time = 3000) {
  setTimeout(() => {
    destoryMessageElement(element)
  }, time)
}
function destoryMessageElement(element) {
  if (!element.parentElement?.contains(element))
    return
  element.parentElement?.removeChild(element)
  messageInstaceList = messageInstaceList.filter(item => item !== element)
  messageInstaceList.forEach((item, index) => {
    item.style.top = `${MESSAGE_START_TOP + index * (MESSAGE_HEIGHT + MESSAGE_GAP)}px`
  })
}
export function MMessage(config) {
  const VNode = h(Message, {
    ...config, 
    onClose: (element) => { 
      destoryMessageElement(element)
    },
  })
  const container = document.createElement('div')
  container.setAttribute('class', 'm-message-container')
  document.body.append(container)
  messageInstaceList.push(container)
  container.style.top
    = `${MESSAGE_START_TOP + (messageInstaceList.length - 1) * (MESSAGE_HEIGHT + MESSAGE_GAP)}px`
  render(VNode, container)
  setDestoryClock(container, config.duration)
}
export default MMessage
export { MButton } from './button'
export { MMessage } from './message'
export { MCol } from './col'
export { MRow } from './row'
export { MIcon } from './icon'
export { MCheckboxGroup } from './checkbox-group'
export { MCheckbox } from './checkbox'
export { MInput } from './input'
export { MSwitch } from './switch'
export { MTree } from './tree'
export { MStep } from './step'
export { MSteps } from './steps'
export { MPagination } from './pagination'
export { MCarouselItem } from './carousel-item'
export { MCarousel } from './carousel'
export { MCollapseItem } from './collapse-item'
export { MCollapse } from './collapse'
export { MTable } from './table'
export { MSelect } from './select'
export { MFormItem } from './form-item'
export { MForm } from './form'
export { MDialog } from './dialog'
export { MTooltip } from './tooltip'
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Form from './src/form.vue'
export const MForm = withInstall(Form)
export default MForm
const MESSAGE_TYPE = ['success', 'info', 'warning', 'error']
export const Props = {
  type: {
    type: String,
    default: '',
    validator(value: string) {
      return MESSAGE_TYPE.includes(value)
    },
  },
  message: {
    type: String,
    default: '',
  },
  showClose: {
    type: Boolean,
    default: false,
  },
  duration: {
    type: Number,
    default: 3000,
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import CollapseItem from './src/collapse-item.vue'
export const MCollapseItem = withInstall(CollapseItem)
export default MCollapseItem
<script setup>
import { getCurrentInstance } from 'vue'
import { Props } from './message'
defineProps(Props)
const emit = defineEmits(['close'])
const MESSAGE_ICON_NAME = {
  success: 'success-filling',
  info: 'prompt-filling',
  warning: 'warning-filling',
  error: 'delete-filling',
}
const instance = getCurrentInstance()
function close() {
  emit('close', instance.vnode.el.parentElement)
}
</script>
<template>
  <div class="m-message" :class="`m-message__${type}`">
    <i :class="`m-icon icon-${MESSAGE_ICON_NAME[type]}`" />
    <span class="m-message__text">{{ message }}</span>
    <i v-if="showClose" class="m-icon icon-close-bold m-message_close_icon" @click="close" />
  </div>
</template>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import FormItem from './src/form-item.vue'
export const MFormItem = withInstall(FormItem)
export default MFormItem
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Input from './src/input.vue'
export const MInput = withInstall(Input)
export default MInput
<script setup>
import { reactive, toRefs, useSlots } from 'vue'
import { Props } from './input.ts'
const props = defineProps(Props)
const emit = defineEmits(['update:modelValue'])
const slot = useSlots()
const state = reactive({
  isFocus: false,
  inputType: props.type,
  eyeClass: 'icon-eye-close',
})
const { isFocus, inputType, eyeClass } = toRefs(state)
function inputChange(e) {
  emit('update:modelValue', e.target.value)
}
function handleFocus() {
  state.isFocus = true
}
function handleBlur() {
  state.isFocus = false
}
function clearInput() {
  emit('update:modelValue', '')
}
function changeEye() {
  if (state.eyeClass === 'icon-eye-close') {
    state.eyeClass = 'icon-browse'
    state.inputType = 'text'
  }
  else {
    state.eyeClass = 'icon-eye-close'
    state.inputType = 'password'
  }
}
</script>
<template>
  <div class="m-input" :class="{ focus: isFocus }">
    <div v-if="slot['pre-icon']" class="pre-icon">
      <slot name="pre-icon" />
    </div>
    <div class="m-input-box">
      <input
        :type="inputType"
        :value="modelValue"
        :placeholder="placeholder"
        :disabled="disabled"
        class="m-input__inner"
        @input="inputChange"
        @focus="handleFocus"
        @blur="handleBlur"
      >
      <!-- eye -->
      <i
        v-if="type === 'password'"
        class="eye m-icon"
        :class="eyeClass"
        @click.stop="changeEye"
      />
      <!-- clear -->
      <i
        v-show="clearable && modelValue"
        class="clear m-icon icon-delete-filling"
        :style="{
          right: type === 'password' ? '30px' : '4px',
        }"
        @click="clearInput"
      />
    </div>
    <div v-if="slot['suffix-icon']" class="suffix-icon">
      <slot name="suffix-icon" />
    </div>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  modelValue: {
    type: String || Number,
  },
  type: {
    type: String,
    default: 'text',
  },
  placeholder: {
    type: String,
    default: '请输入',
  },
  disabled: {
    type: Boolean,
    default: false,
  },
  clearable: {
    type: Boolean,
    default: false,
  },
}
export const Props = {
  label: {
    type: String,
    default: '',
  },
  itemName: {
    type: String,
    default: '',
  },
}
<script setup>
import { provide, ref } from 'vue'
import Schema from 'async-validator'
import { Props } from './form'
const props = defineProps(Props)
const errorCollection = ref([]) 
provide('rules', props.rules) 
provide('label-width', props.labelWidth) 
provide('error-collection', errorCollection) 
function validate(callback) {
  if (props.rules) {
    const validator = new Schema(props.rules)
    validator.validate(props.model, (errors, fields) => {
      errorCollection.value = errors || []
      callback(!errors, fields)
    })
  }
  else {
    callback(true, props.model)
  }
}
function resetFields() {
  errorCollection.value = []
}
defineExpose({
  validate,
  resetFields,
})
</script>
<template>
  <form class="m-form">
    <slot />
  </form>
</template>
<style scoped>
</style>
import type { Rules } from 'async-validator'
export const Props = {
  model: {
    type: Object,
    default: () => ({}),
  },
  labelWidth: {
    type: String,
    default: 'auto',
  },
  rules: {
    type: Object as () => Rules,
    default: () => ({}),
  },
}
<script setup>
import { computed, inject } from 'vue'
import { Props } from './form-item'
const props = defineProps(Props)
const labelWidth = inject('labelWidth') 
const rules = inject('rules') 
const errorCollection = inject('error-collection') 
const isRequired = computed(() => {
  const currentRules = props.itemName && rules && rules[props.itemName]
  if (currentRules)
    return currentRules.some(rule => rule.required)
  else
    return false
})
const currentError = computed(() => {
  return (
    errorCollection.value.find(v => v.field === props.itemName)?.message || ''
  )
})
</script>
<template>
  <div
    class="m-form-item"
    :class="{ is_error: currentError, is_required: isRequired }"
  >
    <!-- 表单项名 -->
    <div
      v-if="!!label"
      class="m-form-item__label"
      :style="{
        width: labelWidth || '100px',
      }"
    >
      {{ label }}
    </div>
    <!-- 表单项 -->
    <div class="m-form-item__content">
      <slot />
      <!-- 错误信息 -->
      <div
        v-if="currentError"
        class="m-form-item__error-message"
      >
        {{ currentError }}
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
export function withInstall(comp) {
  comp.install = (app) => {
    app.component(comp.name, comp)
  }
  return comp
}
<script setup>
import { computed, inject, ref } from 'vue'
import { Props } from './collapse-item'
const props = defineProps(Props)
const opened = inject('opened') 
const accordion = inject('accordion') 
const show = computed(() => opened?.value.includes(props.name))
function handleClick() {
  if (accordion?.value)
    opened.value = opened.value === [props.name] ? [] : [props.name]
  else
    opened.value = opened.value.includes(props.name) ? opened.value.filter(item => item !== props.name) : [...opened.value, props.name]
}
</script>
<template>
  <div class="m-collapse-item" :class="{ active: show }">
    <!-- 标题部分 -->
    <div class="m-collapse-item__button" @click="handleClick">
      <div class="m-collapse-item__title">
        <!-- 具名插槽，如果父组件没有使用template指定，默认显示title -->
        <slot name="title">
          {{ title }}
        </slot>
      </div>
      <i class="m-collapse-item__icon m-icon icon-arrow-right" />
    </div>
    <!-- 内容部分 -->
    <div class="m-collapse-item__body">
      <div class="m-collapse-item__reference">
        <div class="m-collapse-item__content">
          <slot />
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
export const Props = {
  title: {
    type: String,
    default: '',
  },
  name: {
    type: String,
    default: '',
  },
}
import type { AppContext, Plugin } from 'vue'
export type SFCWithInstall<T> = T & Plugin
export type SFCInstallWithContext<T> = SFCWithInstall<T> & {
  _context: AppContext | null
}
<script setup>
import { computed, inject, ref } from 'vue'
import { Props } from './collapse-item'
const props = defineProps(Props)
const opened = inject('opened') 
const change = inject('change') 
const accordion = inject('accordion') 
const show = computed(() => opened?.value.includes(props.name))
function handleClick() {
  const oldSelect = JSON.parse(JSON.stringify(opened?.value))
  let newSelected = oldSelect.includes(props.name)
    ? oldSelect.filter(item => item !== props.name)
    : [...oldSelect, props.name]
  if (accordion?.value) {
    newSelected = [props.name]
    newSelected = newSelected[0] === oldSelect[0] ? [] : newSelected
  }
  change && change(newSelected)
}
</script>
<template>
  <div class="m-collapse-item" :class="{ active: show }">
    <!-- 标题部分 -->
    <div class="m-collapse-item__button" @click="handleClick">
      <div class="m-collapse-item__title">
        <!-- 具名插槽，如果父组件没有使用template指定，默认显示title -->
        <slot name="title">
          {{ title }}
        </slot>
      </div>
      <i class="m-collapse-item__icon m-icon icon-arrow-right" />
    </div>
    <!-- 内容部分 -->
    <div class="m-collapse-item__body">
      <div class="m-collapse-item__reference">
        <div class="m-collapse-item__content">
          <slot />
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
</style>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Collapse from './src/collapse.vue'
export const MCollapse = withInstall(Collapse)
export default MCollapse
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import CheckboxGroup from './src/checkbox-group.vue'
export const MCheckboxGroup = withInstall(CheckboxGroup)
export default MCheckboxGroup
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Col from './src/col.vue'
export const MCol = withInstall(Col)
export default MCol
export const Props = {
  accordion: {
    type: Boolean,
    default: false,
  },
}
<script setup>
import { computed, provide } from 'vue'
import { Props } from './collapse'
const props = defineProps(Props)
const emit = defineEmits(['update:modelValue', 'change'])
const opened = computed(() => props.modelValue)
const accordion = computed(() => props.accordion)
function change(newSelected) {
  emit('update:modelValue', newSelected)
}
provide('opened', opened)
provide('change', change)
provide('accordion', accordion)
</script>
<template>
  <div class="m-collapse">
    <slot />
  </div>
</template>
<style scoped>
</style>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Checkbox from './src/checkbox.vue'
export const MCheckbox = withInstall(Checkbox)
export default MCheckbox
<script setup>
import { computed, provide } from 'vue'
import { Props } from './collapse'
const props = defineProps(Props)
const opened = defineModel()
const accordion = computed(() => props.accordion)
provide('opened', opened)
provide('accordion', accordion)
</script>
<template>
  <div class="m-collapse">
    <slot />
  </div>
</template>
<style scoped>
</style>
<script setup>
import { computed, provide } from 'vue'
import { Props } from './checkbox-group.ts'
const props = defineProps(Props)
const emit = defineEmits(['update:modelValue', 'change'])
const modelValueRef = computed(() => props.modelValue)
function groupModelChange(label) {
  const newValue = props.modelValue?.includes(label)
    ? props.modelValue.filter(v => v !== label)
    : [...(props.modelValue), label]
  emit('update:modelValue', newValue)
  emit('change', newValue)
}
provide('groupData', {
  modelValueRef,
  groupModelChange,
})
</script>
<template>
  <div class="m-checkbox-group">
    <slot />
  </div>
</template>
<style scoped>
</style>
<script setup>
import { Props } from './col.ts'
defineProps(Props)
</script>
<template>
  <i class="m-icon" :class="`m-col-${span}`"><slot /></i>
</template>
<style scoped>
</style>
export const Props = {
  span: {
    type: Number,
  },
}
export const Props = {
  modelValue: {
    type: Array,
  },
  disabled: {
    type: Boolean,
    default: false,
  },
}
import { nextTick, onMounted, onUnmounted, reactive, ref } from 'vue'
const SUSPENSION_GAP = 10
function useToggle() {
  const triggerOrigin = ref()
  const trigger = ref()
  const showTrigger = ref(false)
  const suspensionStyle = reactive({})
  let clientHeight = 0
  let top1 = 0
  let top2 = 0
  const click = () => {
    showTrigger.value = !showTrigger.value
    if (trigger.value && triggerOrigin.value && showTrigger.value) {
      const documentScrollTop = document.documentElement.scrollTop
      const triggerOriginRect = triggerOrigin.value!.getBoundingClientRect()
      suspensionStyle.left = `${triggerOriginRect.left}px`
      nextTick(() => {
        top1
          = triggerOriginRect.top 
          + triggerOriginRect.height 
          + SUSPENSION_GAP 
          + documentScrollTop 
        top2
          = triggerOriginRect.top
          + documentScrollTop
          - SUSPENSION_GAP
          - trigger.value!.offsetHeight
        const top
        = triggerOriginRect.top 
        + trigger.value!.offsetHeight 
        + SUSPENSION_GAP 
        > clientHeight
          ? top2
          : top1
        suspensionStyle.top = `${top}px`
        trigger.value!.style.height = `${trigger.value!.offsetHeight}px`
        trigger.value!.style.width = `${triggerOrigin.value!.offsetWidth}px`
      })
    }
  }
  const isHide = (e) => {
    if (
      !triggerOrigin.value?.contains(e.target)
        && !trigger.value!.contains(e.target)
    )
      showTrigger.value = false
  }
  onMounted(() => {
    clientHeight = document.documentElement.clientHeight
    window.addEventListener('scroll', () => {
      if (showTrigger.value) {
        const triggerOriginRect = triggerOrigin.value!.getBoundingClientRect()
        const top
            = triggerOriginRect.top + trigger.value!.offsetHeight + SUSPENSION_GAP
            > clientHeight
              ? top2 
              : top1 
        suspensionStyle.top = `${top}px`
      }
    })
    document.addEventListener('click', isHide)
  })
  onUnmounted(() => {
    document.removeEventListener('click', isHide)
  })
  return {
    trigger, 
    triggerOrigin, 
    showTrigger, 
    suspensionStyle, 
    click, 
  }
}
export default useToggle
<script setup>
import { computed, inject, useSlots } from 'vue'
import { Props } from './checkbox.ts'
const props = defineProps(Props)
const emit = defineEmits(['update:modelValue', 'change'])
const slots = useSlots()
const groupData = inject('groupData', undefined)
const isCheck = computed(() => {
  return groupData
    ? (groupData.modelValueRef.value).includes(props.label)
    : props.modelValue
})
function handleChange(e) {
  const value = (e.target).checked
  emit('update:modelValue', value)
  emit('change', {
    label: props.label,
    value,
  })
  groupData && groupData.groupModelChange(props.label)
}
</script>
<template>
  <!-- label绑定ischecked  isdisabled的类 -->
  {{ groupData && groupData.groupModelValue }}
  <label class="m-checkbox" :class="{ 'is-checked': isCheck, 'is-disabled': disabled }">
    <input
      type="checkbox" class="m-checkbox__inner"
      :name="lable"
      :value="isCheck"
      :disabled="disabled"
      @change="handleChange"
    >
    <span class="m-checkbox__label">
      <!-- 若无插槽内容，则展示label标签内容 -->
      <template v-if="!slots.default">{{ label }}</template>
      <template v-else><slot /></template>
    </span>
  </label>
</template>
<style scoped>
</style>
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Carousel from './src/carousel.vue'
export const MCarousel = withInstall(Carousel)
export default MCarousel
export const Props = {
  modelValue: { 
    type: Boolean,
  },
  label: { 
    type: String,
    default: '',
  },
  disabled: { 
    type: Boolean,
    default: false,
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import CarouselItem from './src/carousel-item.vue'
export const MCarouselItem = withInstall(CarouselItem)
export default MCarouselItem
<script setup>
import { computed, getCurrentInstance, inject, ref } from 'vue'
defineOptions({
  name: 'MCarouselItem',
})
const currentIndex = inject('currentIndex')
const direction = inject('direction')
const instance = getCurrentInstance()
const currentUid = ref()
currentUid.value = instance?.uid
const active = ref(false)
defineExpose({
  active,
})
</script>
<template>
  <!-- 使用内置transition组件，当组件进入或离开时应用动画 -->
  <transition :name="direction" mode="out-in">
    <!-- 选择性展示组件实例 -->
    <div
      v-show="currentIndex === currentUid"
      class="m-carousel-item"
    >
      <!-- 用户自定义标签内容放入插槽 -->
      <slot />
    </div>
  </transition>
</template>
<style scoped>
</style>
<script setup>
import { computed, ref } from 'vue'
import { MButton } from '../../button'
</script>
<template>
  <div />
</template>
<style scoped>
</style>
<script setup>
import { computed, getCurrentInstance, inject, onMounted, ref } from 'vue'
defineOptions({
  name: 'MCarouselItem',
})
const currentIndex = inject('currentIndex')
const direction = inject('direction')
const indexList = inject('getIndexList')
const index = ref()
onMounted(() => {
  index.value = indexList()
})
const active = ref(false)
defineExpose({
  active,
})
</script>
<template>
  <!-- 使用内置transition组件，当组件进入或离开时应用动画 -->
  <transition :name="direction" mode="out-in">
    <!-- 选择性展示组件实例 -->
    <div
      v-show="currentIndex === index"
      class="m-carousel-item"
    >
      <!-- 用户自定义标签内容放入插槽 -->
      <slot />
    </div>
  </transition>
</template>
<style scoped>
</style>
<script setup>
import {
  computed,
  getCurrentInstance,
  nextTick,
  onMounted,
  onUnmounted,
  provide,
  ref,
  useSlots,
  watch,
} from 'vue'
import { Props } from './carousel'
const props = defineProps(Props)
const instance = getCurrentInstance() 
const vnodeUidlist = ref([]) 
const currentIndex = ref(0) 
const isEnter = ref(false) 
const clock = ref(null) 
const transitionName = ref('')
provide('currentIndex', currentIndex)
provide('direction', transitionName)
function getCarouselItemList() {
  const children = instance?.subTree.children
  const uid
    = children
    && (children)[0].children[0].children
      .filter(item => item.component)
      .map(item => item.component?.uid)
  vnodeUidlist.value = uid
  currentIndex.value = vnodeUidlist.value[0]
}
function start(direction) {
  const index = vnodeUidlist.value.findIndex(
    item => item === currentIndex.value,
  )
  if (direction === 'next') {
    currentIndex.value
      = index === vnodeUidlist.value.length - 1
        ? vnodeUidlist.value[0]
        : vnodeUidlist.value[index + 1]
  }
  else {
    currentIndex.value
      = index === 0
        ? vnodeUidlist.value[vnodeUidlist.value.length - 1]
        : vnodeUidlist.value[index - 1]
  }
}
function autoPlay() {
  if (!clock.value) {
    nextTick(() => {
      transitionName.value = props.direction
    })
    clock.value = setInterval(
      () => start(props.direction),
      props.interval || 3000,
    )
  }
}
function goForward() {
  transitionName.value = 'next'
  start('next')
}
function goBackward() {
  transitionName.value = 'pre'
  start('pre')
}
function goTo(uuid) {
  currentIndex.value = uuid
}
function handleMouseEnter() {
  isEnter.value = true
  if (clock.value) {
    clearInterval(clock.value)
    clock.value = null
  }
}
function handleMouseOut() {
  isEnter.value = false
  props.autoplay && autoPlay()
}
const showArrow = computed(() => {
  let display = ''
  if (props.arrow === 'always')
    display = 'flex'
  else if (props.arrow === 'never')
    display = 'none'
  else if (isEnter.value)
    display = 'flex'
  else
    display = 'none'
  return display
})
onMounted(() => {
  getCarouselItemList()
  props.autoplay && autoPlay()
})
onUnmounted(() => {
  clock.value && clearInterval(clock.value)
})
</script>
<template>
  <div
    class="m-carousel"
    @mouseenter.self="handleMouseEnter"
    @mouseleave.self="handleMouseOut"
  >
    <div class="m-carousel_container">
      <slot />
    </div>
    <!-- 左箭头 -->
    <div
      v-show="arrow === 'always' || isEnter"
      class="m-carousel__arrow m-carousel__arrow--left"
      :style="{
        display: showArrow,
      }"
      @click="goBackward"
    >
      <i class="m-icon icon-arrow-left-bold" />
    </div>
    <!-- 右箭头 -->
    <div
      v-show="arrow === 'always' || isEnter"
      class="m-carousel__arrow m-carousel__arrow--right"
      :style="{
        display: showArrow,
      }"
      @click="goForward"
    >
      <i class="m-icon icon-arrow-right-bold" />
    </div>
    <!-- 轮播序号 -->
    <ul class="m-carousel__dot_list">
      <li
        v-for="uuid in vnodeUidlist"
        :key="uuid"
        class="m-carousel_dot"
        :class="{ 'm-carousel_dot_active': uuid === currentIndex }"
        @click="goTo(uuid)"
      />
    </ul>
  </div>
</template>
<style scoped>
</style>
const DIRECTION = ['horizontal', 'vertical']
export const Props = {
  height: {
    type: String,
    default: '300px',
  },
  autoplay: {
    type: Boolean,
    default: false,
  },
  interval: {
    type: Boolean,
    default: true,
  },
  direction: {
    type: String,
    default: 'horizontal',
    validator(value) {
      return DIRECTION.includes(value)
    },
  },
}
<script setup>
import {
  computed,
  getCurrentInstance,
  nextTick,
  onMounted,
  onUnmounted,
  provide,
  ref,
  useSlots,
  watch,
} from 'vue'
import { Props } from './carousel'
const props = defineProps(Props)
const index = ref(0)
const indexList = ref([])
const currentIndex = ref(0)
const isEnter = ref(false) 
const clock = ref(null) 
const transitionName = ref('')
provide('currentIndex', currentIndex)
provide('direction', transitionName)
provide('getIndexList', getIndexList)
function getIndexList() {
  const temp = index.value
  indexList.value.push(index.value++)
  return temp
}
function start(direction) {
  if (direction === 'next') {
    currentIndex.value
      = currentIndex.value === indexList.value.length - 1
        ? 0
        : ++currentIndex.value
  }
  else {
    currentIndex.value
      = currentIndex.value === 0
        ? indexList.value.length - 1
        : --currentIndex.value
  }
}
function autoPlay() {
  if (!clock.value) {
    nextTick(() => {
      transitionName.value = props.direction
    })
    clock.value = setInterval(
      () => start(props.direction),
      props.interval || 3000,
    )
  }
}
function goForward() {
  transitionName.value = 'next'
  start('next')
}
function goBackward() {
  transitionName.value = 'pre'
  start('pre')
}
function goTo(index) {
  currentIndex.value = index
}
function handleMouseEnter() {
  isEnter.value = true
  if (clock.value) {
    clearInterval(clock.value)
    clock.value = null
  }
}
function handleMouseOut() {
  isEnter.value = false
  props.autoplay && autoPlay()
}
const showArrow = computed(() => {
  let display = ''
  if (props.arrow === 'always')
    display = 'flex'
  else if (props.arrow === 'never')
    display = 'none'
  else if (isEnter.value)
    display = 'flex'
  else
    display = 'none'
  return display
})
onMounted(() => {
  props.autoplay && autoPlay()
})
onUnmounted(() => {
  clock.value && clearInterval(clock.value)
})
</script>
<template>
  <div
    class="m-carousel"
    @mouseenter.self="handleMouseEnter"
    @mouseleave.self="handleMouseOut"
  >
    <!-- 轮播图放入插槽 -->
    <div class="m-carousel_container">
      <slot />
    </div>
    <!-- 左箭头 -->
    <div
      v-show="arrow === 'always' || isEnter"
      class="m-carousel__arrow m-carousel__arrow--left"
      :style="{
        display: showArrow,
      }"
      @click="goBackward"
    >
      <i class="m-icon icon-arrow-left-bold" />
    </div>
    <!-- 右箭头 -->
    <div
      v-show="arrow === 'always' || isEnter"
      class="m-carousel__arrow m-carousel__arrow--right"
      :style="{
        display: showArrow,
      }"
      @click="goForward"
    >
      <i class="m-icon icon-arrow-right-bold" />
    </div>
    <!-- 轮播序号 -->
    <ul class="m-carousel__dot_list">
      <li
        v-for="i in indexList"
        :key="i"
        class="m-carousel_dot"
        :class="{ 'm-carousel_dot_active': i === currentIndex }"
        @click="goTo(i)"
      />
    </ul>
  </div>
</template>
<style scoped>
</style>
const DIRECTION = ['pre', 'next']
const ARROW = ['hover', 'always', 'never']
export const Props = {
  autoplay: {
    type: Boolean,
    default: true,
  },
  interval: {
    type: Number,
    default: 3000,
  },
  direction: {
    type: String,
    default: 'next',
    validator(value) {
      return DIRECTION.includes(value)
    },
  },
  arrow: {
    type: String,
    default: 'hover',
    validator(value) {
      return ARROW.includes(value)
    },
  },
}
import { withInstall } from '@muggle-ui/utils/withInstall.ts'
import Button from './src/button.vue'
export const MButton = withInstall(Button)
export default MButton
<script setup lang="ts">
import { props } from './button'
defineProps(props)
</script>
<template>
  <button
    class="m-button"
    :class="[
      `m-button__${type}`,
      `${size && `m-button--${size}`}`, // 若size存在，则返回`p-button--${size}`，否则返回空字符串
      { 'm-button--icon': icon }, // 若icon有值，则为true
      { 'is-plain': plain },
      { 'is-round': round },
      { 'is-disabled': disabled },
    ]"
  >
    <i
      v-if="icon" class="m-icon" :class="[
        `icon-${icon}`,
      ]"
    />
    <slot />
  </button>
</template>
const BUTTON_SIZE = ['', 'small', 'mini']
export const props = {
  type: {
    type: String,
    default: 'default',
  },
  size: {
    type: String,
    default: '',
    validator(value: string) {
      return BUTTON_SIZE.includes(value)
    },
  },
  plain: {
    type: Boolean,
    default: false,
  },
  round: {
    type: Boolean,
    default: false,
  },
  icon: {
    type: String,
    default: '',
  },
  disabled: {
    type: Boolean,
    default: false,
  },
}
